import useBottomSheet from '@/common-ui/BottomSheet/hooks/useBottomSheet';
import { ChangeEventHandler, useCallback, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { v4 as uuid } from 'uuid';

export interface CategoryItem {
  id: string;
  emoji: string;
  categoryName: string;
}

const useHandleAddCategory = () => {
  // INTERACTION
  // 1. ÏÇ¨Ïö©Ïûê Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠
  const router = useNavigate();
  const onClickBack = () => {
    router(-1);
  };

  // 2. ÏÇ¨Ïö©Ïûê Ï†ÄÏû• Î≤ÑÌäº ÌÅ¥Î¶≠
  const onClickSave = () => {
    // TODO : Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä API Ìò∏Ï∂ú
    // TODO : Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä ÌõÑ Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    router(-1);
  };

  // 3. ÏÇ¨Ïö©Ïûê Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥Î™®ÏßÄ Î≥ÄÍ≤Ω
  const [emoji, setEmoji] = useState('üòé');
  const { close, isOpen, open } = useBottomSheet();
  const onChangeEmoji = useCallback((emoji: string) => {
    setEmoji(emoji);
    open();
  }, []);

  // 4. ÏÇ¨Ïö©Ïûê Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥Î¶Ñ Î≥ÄÍ≤Ω
  const [categoryName, setCategoryName] = useState('');
  const onChangeCategoryName = useCallback<
    ChangeEventHandler<HTMLInputElement>
  >((categoryName) => {
    setCategoryName(categoryName.target.value);
  }, []);

  // 5. ÏÇ¨Ïö©Ïûê Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä
  const isAllCategoryInfoFilled = (): boolean =>
    Boolean(emoji.length && categoryName.length);

  const [categoryList, setCategoryList] = useState<CategoryItem[]>([]);
  const onClickAddCategory = useCallback(() => {
    setCategoryList([...categoryList, { emoji, categoryName, id: uuid() }]);
    setEmoji('üòé');
    setCategoryName('');
  }, [categoryList, emoji, categoryName]);

  // 6. ÏÇ¨Ïö©Ïûê Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÇ≠Ï†ú
  const onClickDeleteCategory = useCallback(
    (id: string) => {
      setCategoryList(categoryList.filter((item) => item.id !== id));
    },
    [categoryList],
  );

  // 7. ÏÇ¨Ïö©Ïûê Ïπ¥ÌÖåÍ≥†Î¶¨ ÏàòÏ†ï
  const onClickEditCategory = useCallback(
    (id: string) => {
      // 1. ÏàòÏ†ïÌï† Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Ï∞æÎäîÎã§.
      const category = categoryList.find((category) => category.id === id);
      // 2. ÏàòÏ†ïÌï† Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Ïù¥Î¶ÑÍ≥º Ïù¥Î™®ÏßÄÎ•º Î≥ÄÍ≤ΩÌïúÎã§.
      if (category) {
        setEmoji(category.emoji);
        setCategoryName(category.categoryName);
      }
      // 3. ÏàòÏ†ïÌï† Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÇ≠Ï†úÌïúÎã§.
      setCategoryList(categoryList.filter((category) => category.id !== id));
    },
    [categoryList, emoji, categoryName],
  );

  return {
    emoji,
    categoryName,
    categoryList,
    close,
    isOpen,
    isAllCategoryInfoFilled,
    onClickBack,
    onClickSave,
    onChangeEmoji,
    onChangeCategoryName,
    onClickAddCategory,
    onClickDeleteCategory,
    onClickEditCategory,
  };
};

export default useHandleAddCategory;
